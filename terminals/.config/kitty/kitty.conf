# vim:fileencoding=utf-8:ft=conf

# Fonts {{{
# Fonts
font_family Cascadia Code
bold_font Cascadia Code Bold
italic_font Cascadia Code Italic
bold_italic_font Cascadia Code Bold Italic
#
# System default
font_family      Cascadia Code
italic_font      Cascadia Code Italic
bold_font        Cascadia Code Bold
bold_italic_font Cascadia Code Bold Italic
font_size        9.0
adjust_line_height 0
adjust_column_width 0
box_drawing_scale 0.001, 1, 1.5, 2
# }}}


# Cursor customization {{{
cursor           #5f7691
cursor_shape     block
cursor_blink_interval     0.5
cursor_stop_blinking_after 15.0
# }}}


# Scrollback {{{
scrollback_lines 2000
scrollback_pager less +G -R
wheel_scroll_multiplier 5.0
# }}}


# Mouse {{{
url_color #5f7691
url_style curly
open_url_modifiers ctrl+shift
open_url_with default
copy_on_select no
rectangle_select_modifiers ctrl+alt
select_by_word_characters :@-./_~?&=%+#
click_interval 0.5
mouse_hide_wait 3.0
focus_follows_mouse no
# }}}


# Performance tuning {{{
repaint_delay    10
input_delay 3
sync_to_monitor yes
# }}}


# Audio/visual bell {{{
visual_bell_duration 0.0
enable_audio_bell yes
# }}}


# Window layout {{{
remember_window_size   no
initial_window_width   400
initial_window_height  400
enabled_layouts *
window_border_width 1
window_margin_width 0
window_padding_width 20
active_border_color #ddb680
inactive_border_color #01102e
inactive_text_alpha 1.0
# }}}


# Tab bar {{{
tab_bar_edge bottom
tab_""
active_tab_foreground #6095c8
active_tab_background #01102e
active_tab_font_style bold
inactive_tab_foreground #6095c8
inactive_tab_background #01102e
inactive_tab_font_style normal
# }}}


# Color scheme {{{
foreground       #dffcff
background       #01091e
background_opacity 1
selection_foreground #dffcff
selection_background #9D8A70
# black
color0   #01102e
color8   #01102e
# red
color1   #9A655D
color9   #d87768
# green
color2   #535C67
color10  #5f7691
# yellow
color3   #9D8A70
color11  #ddb680
# blue
color4  #276491
color12 #2683c8
# magenta
color5   #2F506E
color13  #326899
# cyan
color6   #56738F
color14  #6095c8
# white
color7   #a9bfcb
color15  #dffcff
# }}}


# Advanced {{{
# The shell program to execute. The default value of . means
# to use whatever shell is set as the default shell for the current user.
# Note that on macOS if you change this, you might need to add --login to
# ensure that the shell starts in interactive mode and reads its startup rc files.
shell .
close_on_child_death no
allow_remote_control no
term xterm-kitty
# }}}


# Keyboard shortcuts {{{
# For a list of key names, see: http://www.glfw.org/docs/latest/group__keys.html
# For a list of modifier names, see: http://www.glfw.org/docs/latest/group__mods.html
#
# You can use the special action no_op to unmap a keyboard shortcut that is
# assigned in the default configuration.
#
# You can combine multiple actions to be triggered by a single shortcut, using the
# syntax below:
# map key combine <separator> action1 <separator> action2 <separator> action3 ...
# For example:
# map ctrl+shift+e combine : new_window : next_layout
# this will create a new window and switch to the next available layout

# Clipboard {{{
map ctrl+shift+v        no_op
map ctrl+shift+s        no_op
map ctrl+shift+c        no_op
map ctrl+y              paste_from_clipboard
map alt+w               copy_to_clipboard
map shift+insert        paste_from_selection
# you can specify your own, for example:
map ctrl+shift+o        no_op
map ctrl+alt+o          pass_selection_to_program
map ctrl+alt+e          pass_selection_to_program emacs
map ctrl+alt+f          pass_selection_to_program firefox
# }}}

# Scrolling {{{
map ctrl+shift+up        scroll_line_up
map ctrl+shift+down      scroll_line_down
map ctrl+shift+k         scroll_line_up
map ctrl+shift+j         scroll_line_down
map ctrl+shift+page_up   scroll_page_up
map ctrl+shift+page_down scroll_page_down
map ctrl+shift+home      scroll_home
map ctrl+shift+end       scroll_end
map ctrl+shift+h         show_scrollback
# }}}

# Window management {{{
map ctrl+shift+enter    new_window
map ctrl+shift+n        new_os_window
map ctrl+shift+w        close_window
map ctrl+shift+]        next_window
map ctrl+shift+[        previous_window
map ctrl+shift+f        move_window_forward
map ctrl+shift+b        move_window_backward
map ctrl+shift+`        move_window_to_top
map ctrl+shift+1        first_window
map ctrl+shift+2        second_window
map ctrl+shift+3        third_window
map ctrl+shift+4        fourth_window
map ctrl+shift+5        fifth_window
map ctrl+shift+6        sixth_window
map ctrl+shift+7        seventh_window
map ctrl+shift+8        eighth_window
map ctrl+shift+9        ninth_window
map ctrl+shift+0        tenth_window
# You can open a new window running an arbitrary program, for example:
# map ctrl+shift+y      new_window mutt
#
# You can pass the current selection to the new program by using the @selection placeholder
# map ctrl+shift+y      new_window less @selection
#
# You can even send the contents of the current screen + history buffer as stdin using
# the placeholders @text (which is the plain text) and @ansi (which includes text styling escape codes).
# For only the current screen, use @screen or @ansi_screen.
# For example, the following command opens the scrollback buffer in less in a new window.
# map ctrl+shift+y      new_window @ansi less +G -R
#
# You can open a new window with the current working directory set to the
# working directory of the current window using
# map ctrl+alt+enter    new_window_with_cwd
# }}}

# Tab management {{{
map ctrl+shift+right    next_tab
map ctrl+shift+left     previous_tab
map ctrl+shift+t        new_tab
map ctrl+shift+q        close_tab
map ctrl+shift+l        next_layout
map ctrl+shift+.        move_tab_forward
map ctrl+shift+,        move_tab_backward
# You can also create shortcuts to go to specific tabs, with 1 being the first tab
# map ctrl+alt+1          goto_tab 1
# map ctrl+alt+2          goto_tab 2

# Just as with new_window above, you can also pass the name of arbitrary
# commands to run when using new_tab and use new_tab_with_cwd.
# }}}

# Layout management {{{
# You can create shortcuts to switch to specific layouts
# map ctrl+alt+1          goto_layout tall
# map ctrl+alt+2          goto_layout stack
# }}}

# Font sizes {{{
map ctrl+shift+equal    increase_font_size
map ctrl+shift+minus    decrease_font_size
map ctrl+shift+backspace restore_font_size
# To setup shortcuts for specific font sizes, follow the example below:
# map ctrl+shift+f6     set_font_size 10.0
# map ctrl+shift+f7     set_font_size 20.5
# }}}

# Miscellaneous {{{
map ctrl+shift+f11      toggle_fullscreen
map ctrl+shift+u        input_unicode_character
map ctrl+shift+f2       edit_config_file
# Open a currently visible URL using the keyboard. The program used to open the URL is specified in open_url_with.
# You can customize how the URLs are detected and opened by specifying command line options to
# url_hints. For example:
# map ctrl+shift+e        run_simple_kitten text url_hints --program firefox --regex "http://[^ ]+"
map ctrl+shift+e        run_simple_kitten text url_hints

# Sending arbitrary text on shortcut key presses
# You can tell kitty to send arbitrary (UTF-8) encoded text to
# the client program when pressing specified shortcut keys. For example:
# map ctrl+alt+a send_text all Special text
# This will send "Special text" when you press the Ctrl+Alt+a key combination.
# The text to be sent is a python string literal so you can use escapes like
# \x1b to send control codes or \u21fb to send unicode characters (or you can
# just input the unicode characters directly as UTF-8 text). The first argument
# to send_text is the keyboard modes in which to activate the shortcut. The possible
# values are normal or application or kitty or a comma separated combination of them.
# The special keyword all means all modes. The modes normal and application refer to
# the DECCKM cursor key mode for terminals, and kitty refers to the special kitty
# extended keyboard protocol. Another example, that outputs a word and then moves the cursor
# to the start of the line (same as pressing the Home key):
# map ctrl+alt+a send_text normal Word\x1b[H
# map ctrl+alt+a send_text application Word\x1bOH
# }}}

# }}}
